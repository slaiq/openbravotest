<?xml version="1.0"?>
  <database name="FUNCTION EFIN_CINVOICE_GETNEXTROLE">
    <function name="EFIN_CINVOICE_GETNEXTROLE" type="VARCHAR">
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_role_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_doctype" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_docvalue" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_record_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_ResultStr VARCHAR(120);
v_nextrole_id VARCHAR(32);
v_ParentOrg VARCHAR(32);
v_recordId VARCHAR(200);
v_nextrole_name VARCHAR(200);
v_totalamount NUMBER;
v_role_flag NUMBER:=0;
v_count NUMBER:=0;
Cur_Role RECORD;
v_doctype VARCHAR(60);
v_prepayInv char(1);
v_prepayapp char(1);
vTree VARCHAR2(32);
BEGIN


		--Get Document Type
		select em_efin_isprepayinv,em_efin_isprepayinvapp into v_prepayInv,v_prepayapp from c_doctype where c_doctype_id= p_doctype;  

		IF(v_prepayInv='Y') THEN
			v_doctype:='EUT_110';  --AP PrePayment Invoice
		ELSE IF (v_prepayapp='Y') THEN
			v_doctype:='EUT_109';  -- AP Prepayment Application
		ELSE IF(v_prepayInv='N' AND v_prepayapp='N') THEN
			v_doctype:='EUT_101';  -- AP  Invoice
		END IF;
		END IF;
		END IF;

		select em_eut_next_role_id, c_invoice_id, grandtotal into v_nextrole_id, v_recordId,  v_totalamount 
		from c_invoice where c_invoice_id = p_record_id;
		

	-- Getting NextRole for Approval
	select count(qdrl.ad_role_id) into v_count from eut_documentrule_header qdrh
			join eut_documentrule_lines qdrl on qdrh.eut_documentrule_header_id = qdrl.eut_documentrule_header_id 
			where qdrh.ad_client_id = p_client_id and qdrh.ad_org_id= p_org_id and qdrh.document_type = v_doctype
			 and qdrh.rulevalue <= p_docvalue and qdrl.ad_role_id= p_role_id group by qdrh.rulevalue
			order by qdrh.rulevalue desc limit 1;

	IF(v_count is null)THEN
			SELECT ad_tree_id  INTO vTree  
			FROM ad_tree 
			WHERE ad_client_id=p_client_id
			AND treetype='OO';

			      WHILE (p_org_id is not null and p_org_id <> '')
			      LOOP
				SELECT parent_id INTO p_org_id
				FROM ad_treenode
				WHERE node_id = p_org_id
				AND ad_tree_id = vTree;

				IF p_org_id is not null THEN
					select count(qdrl.ad_role_id) into v_count from eut_documentrule_header qdrh
					join eut_documentrule_lines qdrl on qdrh.eut_documentrule_header_id = qdrl.eut_documentrule_header_id 
					where qdrh.ad_client_id = p_client_id and qdrh.ad_org_id= p_org_id and qdrh.document_type = v_doctype
					and qdrh.rulevalue <= p_docvalue and qdrl.ad_role_id= p_role_id group by qdrh.rulevalue
					order by qdrh.rulevalue desc limit 1;
					
				EXIT WHEN v_count is not null;

				END IF;
				END LOOP;
	ELSE IF(v_count > 0) THEN
	v_role_flag:='1';
	END IF;
	END IF;

	IF(v_count > 0) THEN

	v_role_flag:='1';
	END IF;	

	/*FOR Cur_Role IN (select qdrl.ad_role_id, qr.name as name, qdrl.rolesequenceno as roleseqno, qdrh.rulesequenceno as ruleseqno, qdrl.roleorderno from eut_documentrule_lines qdrl 
			join (select qdrh.eut_documentrule_header_id, qdrh.rulesequenceno, qdrl.rolesequenceno from eut_documentrule_header qdrh
			join eut_documentrule_lines qdrl on qdrh.eut_documentrule_header_id = qdrl.eut_documentrule_header_id 
			where qdrh.ad_client_id = p_client_id and qdrh.ad_org_id= v_ParentOrg and qdrh.document_type = p_doctype
			 and qdrh.rulevalue <= p_docvalue and qdrl.ad_role_id= p_role_id
			order by qdrh.rulevalue desc limit 1) qdrh on qdrh.eut_documentrule_header_id = qdrl.eut_documentrule_header_id 
			left join ad_role qr on qdrl.ad_role_id = qr.ad_role_id where qdrl.ad_client_id = p_client_id and qdrl.ad_org_id= v_ParentOrg
			and qdrl.rolesequenceno = (qdrh.rolesequenceno)+1 order by qdrl.roleorderno)	
	LOOP
		v_role_flag:='1';
	END LOOP;

	-- Insert Record in Approval
	INSERT INTO qcs_project_approval(qcs_project_approval_id, ad_client_id, ad_org_id, createdby, updatedby, qcs_project_id, qcs_proj_budget_id, approverrole, comments, status)
		VALUES (get_uuid(), p_client_id, p_org_id, p_user_id, p_user_id, v_project_id, p_projectbudget_id, p_role_id, p_comments, 'APP');*/

	-- Updating Status
	/*IF v_role_flag = '0' then
		update c_invoice set docstatus = 'AP' ,em_eut_next_role_id = null where c_invoice_id = p_record_id;

	ELSE
		v_nextrole_id:=get_uuid();
		INSERT INTO   eut_next_role(eut_next_role_id, ad_client_id, ad_org_id, createdby, updatedby, document_type) VALUES 
		  (v_nextrole_id, p_client_id, p_org_id, p_user_id, p_user_id, p_doctype);
		FOR Cur_Role IN (select qdrl.ad_role_id, qr.name as name, qdrl.rolesequenceno as roleseqno, qdrh.rulesequenceno as ruleseqno, qdrl.roleorderno from eut_documentrule_lines qdrl 
			join (select qdrh.eut_documentrule_header_id, qdrh.rulesequenceno, qdrl.rolesequenceno from eut_documentrule_header qdrh
			join eut_documentrule_lines qdrl on qdrh.eut_documentrule_header_id = qdrl.eut_documentrule_header_id 
			where qdrh.ad_client_id = p_client_id and qdrh.ad_org_id= p_org_id and qdrh.document_type = p_doctype
			 and qdrh.rulevalue <= p_docvalue and qdrl.ad_role_id= p_role_id
			order by qdrh.rulevalue desc limit 1) qdrh on qdrh.eut_documentrule_header_id = qdrl.eut_documentrule_header_id 
			left join ad_role qr on qdrl.ad_role_id = qr.ad_role_id where qdrl.ad_client_id = p_client_id and qdrl.ad_org_id= p_org_id
			and qdrl.rolesequenceno = (qdrh.rolesequenceno)+1 order by qdrl.roleorderno)
		LOOP

			INSERT INTO eut_next_role_line(eut_next_role_line_id, ad_client_id, ad_org_id, createdby, updatedby, eut_next_role_id, ad_role_id, rolesequenceno) VALUES
			 (get_uuid(), p_client_id, p_org_id, p_user_id, p_user_id, v_nextrole_id, Cur_Role.ad_role_id, Cur_Role.roleorderno);
			v_nextrole_name:=v_nextrole_name||'/'||Cur_Role.name;

		END LOOP;

		update c_invoice set docstatus = 'EFIN_WFA', em_eut_next_role_id = v_nextrole_id where c_invoice_id = p_record_id;
		
	END IF;

	-- Delete Unused Next Roles
	delete from eut_next_role_line where eut_next_role_id in (select eut_next_role_id from eut_next_role where document_type = p_doctype
	 and eut_next_role_id not in (select em_eut_next_role_id from c_invoice where em_eut_next_role_id is not null));


	 delete from eut_next_role where document_type = p_doctype and eut_next_role_id not in (select em_eut_next_role_id from c_invoice where em_eut_next_role_id is not null);*/
	-- select docstatus into v_nextrole_id from c_invoice  where c_invoice_id = p_record_id;
	IF(v_role_flag=0) THEN
	RAISE_APPLICATION_ERROR(-20000, '@Efin_PurInv_CantComplete@');
	END IF;
	return v_role_flag;
END EFIN_CINVOICE_GETNEXTROLE
]]></body>
    </function>
  </database>
