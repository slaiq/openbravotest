<?xml version="1.0"?>
  <database name="FUNCTION EUT_REQMOREINFO_ACCESS">
    <function name="EUT_REQMOREINFO_ACCESS" type="NULL">
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_doctype" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_forwardrmi_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2008 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  Priyanka Ranjan 08-11-2018.
************************************************************************/
--p VARCHAR(32767); --OBTG:VARCHAR2--
v_ResultStr VARCHAR2(2000):='';
vp VARCHAR2(32);
vTree VARCHAR2(32);
v_parentOrg VARCHAR2(32);
v_parent VARCHAR2(32);
v_orgId  VARCHAR2(32);
Cur_Forward RECORD;
Cur_Window RECORD;
Cur_Process RECORD;
Cur_ForwardUpdate RECORD;
Cur_ProcessUpdate RECORD;
v_rmi VARCHAR2(60):='';
v_forward VARCHAR2(60):='';

BEGIN
 FOR Cur_Forward IN (
 --select query
    select frmi.rec_role_id  as torole,frmi.forward_rmi as for_rmi from eut_forward_reqmoreinfo frmi 
    where frmi.eut_forward_reqmoreinfo_id=p_forwardrmi_id and ad_client_id=p_client_id
 )
 
  LOOP 
  -- set forward_rmi id
  IF(Cur_Forward.for_rmi='RMI')THEN
  v_rmi := p_forwardrmi_id;
  v_forward := null;
   END IF;
   IF (Cur_Forward.for_rmi ='F') THEN
  v_rmi := null;
  v_forward := p_forwardrmi_id;
  END IF;
   --Update rmi or forward id in Window Access if already present with either rmi or forward  
  FOR Cur_ForwardUpdate IN(
      select ad_window_access_id  as windowaccessid  from ad_role role
	left join ad_window_access p on p.ad_role_id=role.ad_role_id
	where role.ad_role_id=Cur_Forward.torole  and role.ad_client_id=p_client_id
    and p.ad_window_id is not null
    and p.ad_window_id in (
                           select win.ad_window_id  from ad_window_access win 
	join ad_role role on role.ad_role_id=win.ad_role_id
	where role.em_eut_documenttype=p_doctype and role.ad_client_id=p_client_id)
    and  (em_eut_forward_reqmoreinfo_id is not null or em_eut_reqmoreinfo_id is not null)
      )
   LOOP
      IF(Cur_Forward.for_rmi='RMI') THEN
      Update ad_window_access set em_eut_reqmoreinfo_id = p_forwardrmi_id where ad_window_access_id=Cur_ForwardUpdate.windowaccessid;
       END IF;
      IF(Cur_Forward.for_rmi='F') THEN
      Update ad_window_access set em_eut_forward_reqmoreinfo_id = p_forwardrmi_id where ad_window_access_id=Cur_ForwardUpdate.windowaccessid;
      END IF;
  END LOOP;
  
 --do operation 
     --Window Access 
      -- Insert record in Window Access if not present
     FOR Cur_Window in (
	select ad_window_id as windowid from ad_role role
	join ad_window_access win on win.ad_role_id=role.ad_role_id
	where role.em_eut_documenttype=p_doctype and role.ad_client_id=p_client_id and
	win.ad_window_id not in ( select ad_window_id from ad_role role
	left join ad_window_access p on p.ad_role_id=role.ad_role_id
	where role.ad_role_id=Cur_Forward.torole and role.ad_client_id=p_client_id and ad_window_id is not null ) ) 
     LOOP 
    INSERT INTO public.ad_window_access(
            ad_window_access_id, ad_window_id, ad_role_id, ad_client_id, 
            ad_org_id, isactive, createdby, updatedby, 
            isreadwrite,em_eut_forward_reqmoreinfo_id,em_eut_reqmoreinfo_id)
    VALUES (get_uuid(), Cur_Window.windowid, Cur_Forward.torole, p_client_id, 
            '0', 'Y', p_user_id,p_user_id , 
            'Y',v_forward,v_rmi);
     END LOOP;
  
    --process access
     --Update rmi or forward id in Report and Process Access if already present with either rmi or forward
     FOR Cur_ProcessUpdate IN(
         
          select ad_process_access_id  as processaccessid  from ad_role role
	left join ad_process_access p on p.ad_role_id=role.ad_role_id
	where role.ad_role_id=Cur_Forward.torole  and role.ad_client_id=p_client_id
    and p.ad_process_id is not null
    and p.ad_process_id in (
                           select process.ad_process_id as windowaccessid from ad_process_access process 
	join ad_role role on role.ad_role_id=process.ad_role_id
	where role.em_eut_documenttype=p_doctype and role.ad_client_id=p_client_id)
    and  (em_eut_forward_reqmoreinfo_id is not null or em_eut_reqmoreinfo_id is not null)
        
      )
      LOOP
      IF(Cur_Forward.for_rmi='RMI') THEN
      Update ad_process_access set em_eut_reqmoreinfo_id = p_forwardrmi_id where ad_process_access_id=Cur_ProcessUpdate.processaccessid;
     END IF;
     IF(Cur_Forward.for_rmi='F') THEN
      Update ad_process_access set em_eut_forward_reqmoreinfo_id = p_forwardrmi_id where ad_process_access_id=Cur_ProcessUpdate.processaccessid;
    END IF;
    END LOOP;
   
    -- Insert record in Report and Process Access if not present
    FOR Cur_Process IN (
		select ad_process_id as processid from ad_role role
		 join ad_process_access pro on pro.ad_role_id=role.ad_role_id
		where role.em_eut_documenttype=p_doctype and role.ad_client_id=p_client_id and
		pro.ad_process_id not in ( select ad_process_id from ad_role rl
		left join ad_process_access p on p.ad_role_id=rl.ad_role_id
		where rl.ad_role_id=Cur_Forward.torole and rl.ad_client_id=p_client_id and ad_process_id is not null)
		)	
   LOOP
   INSERT INTO public.ad_process_access(
            ad_process_access_id, ad_process_id, ad_role_id, ad_client_id, 
            ad_org_id, isactive,createdby,updatedby, 
            isreadwrite,em_eut_forward_reqmoreinfo_id,em_eut_reqmoreinfo_id)
    VALUES (get_uuid(), Cur_Process.processid, Cur_Forward.torole, p_client_id,
            '0', 'Y', p_user_id, p_user_id, 
            'Y',v_forward,v_rmi);
   END LOOP;
 END LOOP;
    EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE v_ResultStr ;
  RETURN;
END EUT_REQMOREINFO_ACCESS
]]></body>
    </function>
  </database>
