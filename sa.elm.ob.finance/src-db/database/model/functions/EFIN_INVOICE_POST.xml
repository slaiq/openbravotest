<?xml version="1.0"?>
  <database name="FUNCTION EFIN_INVOICE_POST">
    <function name="EFIN_INVOICE_POST" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_invoice_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2015 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_Post.sql,v 1.32 2003/07/22 05:41:27 jjanke Exp $
  ***
  * Title:  Post single Invoice
  * Description:
  *  Actions: COmplete, APprove, Reverse Correction, Void
  *
  * OpenItem Amount:
  *  - C_BPartner.SO_CreditUsed is increased
  *  - if C_CashLine entry is created
  *  - C_Cash_Post creates C_Allocation
  *  - C_Allocation_Trg decreases C_BPartner.SO_CreditUsed
  *
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Result NUMBER:=1; -- Success
  v_totalqty NUMBER:=0; 
  -- Parameter
  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  Cur_line RECORD;
  Cur_InvoiceLine RECORD;
  Cur_InvoiceLineAcctDim RECORD;
  Cur_Discount RECORD;
  Cur_CInvoiceDiscount RECORD;
  Cur_TaxDiscount RECORD;
  Cur_ReactivateInvoiceLine RECORD;
  Cur_LastContact RECORD;
  Cur_lineqty RECORD;
  Cur_InvoiceTax RECORD;
  Cur_TaxMAct RECORD;
  Cur_Offer RECORD;

  -- Record Info
  v_Client_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_UpdatedBy C_INVOICE.UpdatedBy%TYPE;
  v_Processing C_INVOICE.Processing%TYPE;
  v_Processed C_INVOICE.Processed%TYPE;
  v_DocAction C_INVOICE.DocAction%TYPE;
  v_DocStatus C_INVOICE.DocStatus%TYPE;
  v_DoctypeReversed_ID VARCHAR2(32);
  v_DocType_ID VARCHAR2(32);
  v_DocTypeTarget_ID VARCHAR2(32);
  v_isreturndoctype CHAR(1);
  v_PaymentRule C_INVOICE.PaymentRule%TYPE;
  v_PaymentTerm C_INVOICE.C_PaymentTerm_ID%TYPE;
  v_Order_ID VARCHAR2(32);
  v_DateAcct DATE;
  v_DateInvoiced DATE;
  v_DocumentNo C_INVOICE.DocumentNo%TYPE;
  v_BPartner_ID VARCHAR2(32);
  v_bp_isactive c_bpartner.isactive%TYPE;
  v_BPartner_User_ID VARCHAR2(32);
  v_IsSOTrx C_INVOICE.IsSOTrx%TYPE;
  v_Posted C_INVOICE.Posted%TYPE;
  v_istaxincluded CHAR(1);
  --Added by P.SAROBE
  v_documentno_Settlement VARCHAR2(40);
  v_dateSettlement DATE;
  v_Cancel_Processed CHAR(1);
  v_nameBankstatement VARCHAR2 (60);
  v_dateBankstatement DATE;
  v_nameCash VARCHAR2 (60);
  v_dateCash DATE;
  v_Bankstatementline_ID VARCHAR2(32);
  v_Debtpayment_ID VARCHAR2(32);
  v_CashLine_ID VARCHAR2(32);
  v_ispaid CHAR(1);
  v_Settlement_Cancel_ID VARCHAR2(32);
  --Finish added by P.Sarobe
  --
  v_GrandTotal NUMBER:=0;
  v_TotalLines NUMBER:=0;
  v_Currency_ID VARCHAR2(32);
  v_Multiplier NUMBER:=1;
  v_paymentcheck NUMBER;
  --
  v_RInvoice_ID VARCHAR2(32);
  v_RDocumentNo C_INVOICE.DocumentNo%TYPE;
  v_NextNo VARCHAR2(32);
  v_count NUMBER;
  v_POReference NVARCHAR2(40) ;
  --
  v_SettlementDocType_ID VARCHAR2(32) ;
  v_SDocumentNo C_SETTLEMENT.DocumentNo%TYPE;
  v_settlementID varchar2(32):=NULL;
  --
  v_FirstSales C_BPARTNER.FirstSale%TYPE;
  v_REInOutStatus M_INOUT.DocStatus%TYPE;
  v_REDateInvoiced DATE;
  v_REtotalQtyInvoiced NUMBER:=0;
  v_REdeliveredQty NUMBER:=0;
  --
  v_CumDiscount NUMBER;
  v_OldCumDiscount NUMBER;
  v_InvoiceLineSeqNo NUMBER;
  v_InvoiceLine VARCHAR2(32);
  v_Discount NUMBER;
  v_Line NUMBER;
  v_InvoiceDiscount NUMBER;
  v_C_Project_ID VARCHAR2(32);
  v_acctAmount NUMBER;
  v_partialAmount NUMBER;
  FINISH_PROCESS BOOLEAN:=FALSE;
  END_PROCESSING BOOLEAN:=FALSE;
  v_TargetDocBaseType C_DOCTYPE.DocBaseType%TYPE;
  v_isReversal C_DOCTYPE.IsReversal%TYPE;
  v_MultiplierARC NUMBER:=1;
  v_is_included NUMBER:=0;
  v_available_period NUMBER:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
  v_org_bule_id AD_Org.AD_Org_ID%TYPE;
  
  v_PeriodStartDate DATE;
  v_PeriodEndDate DATE;
  v_DocNo_Org_ID AD_Sequence.AD_Org_ID%TYPE;
  withholdamount NUMBER(10,2);
  cWithHoldId varchar2(32);
  Cur_InvoiceNetLine RECORD;

  v_LineMax NUMBER:=0;
  v_precision NUMBER;
  v_gross_unit_price NUMBER;
  v_line_gross_amount NUMBER;
  v_Isquantityvariable CHAR(1);
  
  v_isdeferred_inv C_InvoiceLine.IsDeferred%TYPE;
  v_defplantype_inv C_InvoiceLine.DefPlanType%TYPE;
  v_periodnumber_inv C_InvoiceLine.periodnumber%TYPE;
  v_period_inv C_InvoiceLine.c_period_id%TYPE;

  v_voiddate_inv C_Invoice.DateInvoiced%TYPE;
  v_voiddate_acct C_Invoice.DateAcct%TYPE;

  v_bpartner_blocked VARCHAR2(1):='N';
  v_invoiceBlocking VARCHAR2(1):='N';
  v_bpartner_name c_bpartner.name%TYPE;
  v_productname m_product.name%TYPE;

  v_iscashvat C_Invoice.IsCashVat%TYPE;
  v_invoiceline_qtysum NUMBER;
  v_PriceList_ID varchar2(32);
  v_prepaymentamt NUMBER;
  v_hasTaxes NUMBER;
   
BEGIN
  IF (p_PInstance_ID IS NOT NULL) THEN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PINSTANCE i
      LEFT JOIN AD_PINSTANCE_PARA p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      IF (Cur_Parameter.parametername = 'voidedDocumentDate') THEN
        v_voiddate_inv := TO_DATE(Cur_Parameter.p_string, 'YYYY-MM-DD');
      ELSIF (Cur_Parameter.parametername = 'voidedDocumentAcctDate') THEN
        v_voiddate_acct := TO_DATE(Cur_Parameter.p_string, 'YYYY-MM-DD');
      END IF;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  v_Record_ID=' || v_Record_ID) ;
  ELSE
    DBMS_OUTPUT.PUT_LINE('--<<C_Invoive_Post>>') ;
    v_Record_ID:=p_Invoice_ID;
  END IF;
BEGIN --BODY

  /*Invoiceline acct dimension*/
  SELECT C_INVOICE.ISSOTRX , C_INVOICE.c_bpartner_id
  INTO v_IsSOTrx, v_BPartner_ID
  FROM C_INVOICE
  WHERE C_INVOICE_ID = v_Record_ID;

  /**
   * Read Invoice
   */

  v_ResultStr:='ReadingInvoice';
   SELECT i.Processing, i.Processed, i.DocAction, i.DocStatus,
      i.C_DocType_ID, i.C_DocTypeTarget_ID,
      i.PaymentRule, i.C_PaymentTerm_ID, i.DateAcct, i.DateInvoiced,
      i.AD_Client_ID, i.AD_Org_ID, i.UpdatedBy, i.DocumentNo,
      i.C_Order_ID, i.IsSOTrx, i.C_BPartner_ID, i.AD_User_ID,
      i.C_Currency_ID, i.POReference, i.Posted,
      i.c_Project_Id, i.C_WithHolding_ID, i.IsCashVat, i.M_PriceList_ID, i.prepaymentamt
  INTO v_Processing, v_Processed, v_DocAction, v_DocStatus,
      v_DocType_ID, v_DocTypeTarget_ID,
      v_PaymentRule, v_PaymentTerm, v_DateAcct, v_DateInvoiced,
      v_Client_ID, v_Org_ID, v_UpdatedBy, v_DocumentNo,
      v_Order_ID, v_IsSOTrx, v_BPartner_ID, v_BPartner_User_ID,
      v_Currency_ID, v_POReference, v_Posted,
      v_C_Project_Id, cWithHoldID, v_iscashvat, v_PriceList_ID, v_prepaymentamt
  FROM C_INVOICE i
  WHERE i.C_Invoice_ID=v_Record_ID FOR UPDATE;

  SELECT dt.isreturn  
  INTO  v_isreturndoctype    
  FROM  c_doctype dt  
  WHERE dt.c_doctype_id= v_DocTypeTarget_ID;

  SELECT pl.istaxincluded
  INTO   v_istaxincluded
  FROM   m_pricelist pl 
  WHERE pl.m_pricelist_id= v_PriceList_ID;
  
  DBMS_OUTPUT.PUT_LINE('Invoice_ID=' || v_Record_ID ||', DocAction=' || v_DocAction || ', DocStatus=' || v_DocStatus || ', DocType_ID=' || v_DocType_ID || ', DocTypeTarget_ID=' || v_DocTypeTarget_ID) ;
  
  /**
   * Invoice Voided, Closed, or Reversed - No Action
   */
  IF (v_User_ID IS NOT NULL) THEN
    v_UpdatedBy:=v_User_ID;
  END IF;
  IF (v_DocStatus IN('VO', 'CL', 'RE')) THEN
    RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@');
  END IF;

  IF (NOT FINISH_PROCESS) THEN
    /**
     * Everything done
     */
    IF (v_Processed='Y' AND v_DocAction NOT IN('RC', 'RE')) THEN
      RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@');
    END IF;
  END IF;--FINISH_PROCESS

IF (NOT FINISH_PROCESS) THEN
   --C_Invoice_Post - Valistaion Process Extension Point
    SELECT count(*) INTO v_count
    FROM DUAL
    where exists (select 1 from ad_ep_procedures where ad_extension_points_id = 'C3A4ABF2DF544F4694142DA9E79495F7');
    IF (v_count=1) THEN
      DECLARE
        v_ep_instance VARCHAR2(32);
        v_extension_point_id VARCHAR2(32) := 'C3A4ABF2DF544F4694142DA9E79495F7';
      BEGIN
        v_ep_instance := get_uuid();
        AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Record_ID',
          v_record_id, NULL, NULL, NULL, NULL, NULL, NULL);
        AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'DocAction',
          v_DocAction, NULL, NULL, NULL, NULL, NULL, NULL);
        AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'User',
          v_User_ID, NULL, NULL, NULL, NULL, NULL, NULL);
        AD_EXTENSION_POINT_HANDLER(v_ep_instance, v_extension_point_id);

        DELETE FROM ad_ep_instance_para
        WHERE ad_ep_instance_id = v_ep_instance;
      END;
    END IF;
 END IF;
    


 IF (NOT FINISH_PROCESS) THEN
    /**************************************************************************
     * Start Processing ------------------------------------------------------
     *************************************************************************/
    v_ResultStr:='LockingInvoice';
    BEGIN -- FOR COMMIT
      UPDATE C_INVOICE
      SET Processing='Y',
          Updated=now(),
          UpdatedBy=v_UpdatedBy
      WHERE C_Invoice_ID=v_Record_ID;
      -- Now, needs to go to END_PROCESSING to unlock
      -- This Commit must remanin due differences between PL execution in Oracle and Postgres
      IF (p_PInstance_ID IS NOT NULL) THEN
        COMMIT;
      END IF;
      EXCEPTION WHEN OTHERS THEN RAISE NO_DATA_FOUND;
    END;--FOR  COMMIT
  END IF;--FINISH_PROCESS

  IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
    /**************************************************************************
     * Credit Multiplier
     *************************************************************************/
    DECLARE
      v_DocBaseType C_DOCTYPE.DocBaseType%TYPE;
      v_DocTypeIsSOtrx C_DOCTYPE.IsSOtrx%TYPE;
    BEGIN
      -- Is it a Credit Memo?
      SELECT DocBaseType, IsReversal, issotrx INTO v_DocBaseType, v_isReversal, v_DocTypeIsSOtrx
      FROM C_DOCTYPE
      WHERE C_DocType_ID=v_DocType_ID;
      IF (v_DocBaseType IN('ARC', 'API') or (v_isReversal='Y' and v_DocTypeIsSOtrx='Y') or (v_isReversal='N' and v_DocTypeIsSOtrx='N')) THEN
        v_Multiplier:=-1;
      END IF;
    END;
  END IF;--FINISH_PROCESS

  IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
    /************************************************************************
     * Actions allowed: Reactivate
     * Modified by Jon Alegria
     */
    IF (v_DocAction='RE') THEN
      IF (v_DocStatus<>'CO') THEN
        RAISE_APPLICATION_ERROR(-20000, '@NotCompletedInvoice@');
      END IF;
      IF (v_Posted='Y') THEN
        RAISE_APPLICATION_ERROR(-20000, '@InvoiceDocumentPosted@');
      END IF;
      SELECT COUNT(*), MAX(C_DEBT_PAYMENT_ID)
        INTO v_Count, v_Debtpayment_ID
      FROM C_DEBT_PAYMENT
      WHERE C_DEBT_PAYMENT.C_Invoice_ID=v_Record_ID
        AND C_Debt_Payment_Status(C_Settlement_Cancel_ID, Cancel_Processed, C_DEBT_PAYMENT.Generate_Processed, IsPaid, IsValid, C_Cashline_ID, C_BankstatementLine_ID)<>'P'
        AND C_ORDER_ID IS NULL;
      IF (v_Count<>0) THEN
        --Added by P.Sarobe. New messages
        SELECT c_Bankstatementline_Id, c_cashline_id, c_settlement_cancel_id, ispaid, cancel_processed
          INTO v_Bankstatementline_ID, v_CashLine_ID, v_Settlement_Cancel_ID, v_ispaid, v_Cancel_Processed
        FROM C_DEBT_PAYMENT
        WHERE C_Debt_Payment_ID = v_Debtpayment_ID;
        IF (v_Bankstatementline_ID IS NOT NULL) THEN
          SELECT C_BANKSTATEMENT.NAME, C_BANKSTATEMENT.STATEMENTDATE
            INTO v_nameBankstatement, v_dateBankstatement
          FROM C_BANKSTATEMENT, C_BANKSTATEMENTLINE
          WHERE C_BANKSTATEMENT.C_BANKSTATEMENT_ID = C_BANKSTATEMENTLINE.C_BANKSTATEMENT_ID
            AND C_BANKSTATEMENTLINE.C_BANKSTATEMENTLINE_ID = v_Bankstatementline_ID;
          RAISE_APPLICATION_ERROR(-20000, '@ManagedDebtPaymentInvoiceBank@'||v_nameBankstatement||' '||'@Bydate@'||v_dateBankstatement) ;
        END IF;
        IF (v_CashLine_ID IS NOT NULL) THEN
          SELECT C_CASH.NAME, C_CASH.STATEMENTDATE
            INTO v_nameCash, v_dateCash
          FROM C_CASH, C_CASHLINE
          WHERE C_CASH.C_CASH_ID = C_CASHLINE.C_CASH_ID
            AND C_CASHLINE.C_CASHLINE_ID = v_CashLine_ID;
          RAISE_APPLICATION_ERROR(-20000, '@ManagedDebtPaymentInvoiceCash@'||v_nameCash||' '||'@Bydate@'||v_dateCash) ;
        END IF;
        IF (v_Cancel_Processed='Y' AND v_ispaid='N') THEN
          SELECT documentno, datetrx
            INTO v_documentno_Settlement, v_dateSettlement
          FROM C_SETTLEMENT
          WHERE C_SETTLEMENT_ID = v_Settlement_Cancel_ID;
          RAISE_APPLICATION_ERROR(-20000, '@ManagedDebtPaymentOrderCancel@'||v_documentno_Settlement||' '||'@Bydate@'||v_dateSettlement) ;
        END IF;
      END IF;
      SELECT COUNT(*) INTO v_Count
      FROM C_DP_MANAGEMENTLINE ml,
           C_DP_MANAGEMENT m,
           C_DEBT_PAYMENT dp
      WHERE ml.C_DP_Management_ID=m.C_DP_Management_ID
        AND ml.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
        AND dp.C_Invoice_ID=v_Record_ID
        AND m.processed='Y';
      IF (v_Count!=0) THEN
        RAISE_APPLICATION_ERROR(-20000, '@DPInvoiceManaged@');
      END IF;
      -- Pending undo not Stocked BOM's
      -- Undo BP Statictis
      --Undo first sale
      SELECT MIN(DateAcct) INTO v_FirstSales
      FROM C_INVOICE
      WHERE C_Invoice_ID<>v_Record_ID
        AND C_BPartner_ID=v_BPartner_ID;
      UPDATE C_BPARTNER  SET FirstSale=v_FirstSales  WHERE C_BPartner_ID=v_BPartner_ID;
      -- Undo Last contact
      FOR Cur_LastContact IN
        (SELECT Updated, DocumentNo, Ad_User_ID
         FROM C_INVOICE
         WHERE C_Invoice_ID<>v_Record_ID
           AND Ad_User_ID=v_BPartner_User_ID
         ORDER BY Updated DESC
        )
      LOOP
        UPDATE AD_USER
        SET LastContact=Cur_LastContact.Updated,
            LastResult=Cur_LastContact.DocumentNo
        WHERE AD_User_ID=Cur_LastContact.Ad_User_ID;
        EXIT;
      END LOOP;
      IF (v_IsSOTrx='Y') THEN
        -- Undo revenue and credit limit
        --The next lines (3) have been commented due to the issue 19198
        --UPDATE C_BPARTNER
        --SET ActualLifeTimeValue=ActualLifeTimeValue -(v_Multiplier *  C_Base_Convert(v_GrandTotal, v_Currency_ID, v_Client_ID, v_DateAcct, v_Org_ID))
        --WHERE C_BPartner_ID=v_BPartner_ID;
        FOR Cur_ReactivateInvoiceLine IN
          (SELECT C_InvoiceLine_ID, C_Orderline_ID, M_InoutLine_ID, QtyInvoiced
           FROM C_INVOICELINE
           WHERE C_Invoice_ID=v_Record_ID
          )
        LOOP
          IF (Cur_ReactivateInvoiceLine.C_OrderLine_ID IS NOT NULL) THEN
            SELECT MAX(C_INVOICE.DateInvoiced), COALESCE(sum(QtyInvoiced),0) 
      INTO v_REDateInvoiced, v_invoiceline_qtysum
      FROM C_INVOICE, C_INVOICELINE
      WHERE C_INVOICE.C_Invoice_ID=C_INVOICELINE.C_INVOICE_ID
      AND C_INVOICELINE.C_ORDERLINE_ID=Cur_ReactivateInvoiceLine.C_ORDERLINE_ID
      and C_INVOICE.docstatus='CO'
      AND C_INVOICE.C_INVOICE_ID <> v_Record_ID;
      
      UPDATE C_ORDERLINE
      SET QtyInvoiced=v_invoiceline_qtysum, 
    DateInvoiced=v_REDateInvoiced,
    Updated=now(),
    UpdatedBy=v_UpdatedBy
      WHERE C_ORDERLINE.C_OrderLine_ID=Cur_ReactivateInvoiceLine.C_OrderLine_ID;
          END IF;
          IF (Cur_ReactivateInvoiceLine.M_InOutLine_ID IS NOT NULL) THEN
            SELECT m.DOCSTATUS INTO v_REInOutStatus
            FROM M_INOUT m, M_INOUTLINE ml
            WHERE M.M_InOut_ID=ml.M_InOut_ID
              AND ml.M_InOutLine_ID=Cur_ReactivateInvoiceLine.M_InOutLine_ID;
            IF (v_REInOutStatus<>'RE') THEN
              SELECT COALESCE(SUM(C_INVOICELINE.QTYINVOICED), 0) INTO v_REtotalQtyInvoiced
              FROM C_INVOICELINE, C_INVOICE
              WHERE C_INVOICE.C_Invoice_ID=C_INVOICELINE.C_Invoice_ID
                AND C_INVOICE.Processed='Y'
                AND C_INVOICELINE.M_InOutLine_ID=Cur_ReactivateInvoiceLine.M_InOutLine_ID;
              v_REtotalQtyInvoiced:=v_REtotalQtyInvoiced - Cur_ReactivateInvoiceLine.QtyInvoiced;
              SELECT MovementQty INTO v_REdeliveredQty
              FROM M_INOUTLINE
              WHERE M_InOutLine_ID=Cur_ReactivateInvoiceLine.M_InOutLine_ID;
              UPDATE M_INOUTLINE
              SET IsInvoiced=(
                     CASE v_REtotalQtyInvoiced
                        WHEN 0 THEN 'N'
                        ELSE 'Y'
                     END)
              WHERE M_InOutLine_ID=Cur_ReactivateInvoiceLine.M_InOutLine_ID;
            END IF;
          END IF;
        END LOOP;
      ELSE
        -- When re-activating an invoice, match invoice lines are removed (if not posted)
        SELECT COUNT(1) INTO v_count
        FROM FACT_ACCT
        WHERE AD_TABLE_ID = (SELECT AD_TABLE_ID 
                             FROM AD_TABLE
                             WHERE UPPER(TABLENAME) LIKE 'M_MATCHPO')
                                AND RECORD_ID IN (SELECT M_MATCHPO_ID
                                                  FROM M_MATCHPO MP, C_INVOICE I, C_INVOICELINE IL
                                                  WHERE I.C_INVOICE_ID=IL.C_INVOICE_ID
                                                    AND MP.C_INVOICELINE_ID=IL.C_INVOICELINE_ID
                                                    AND I.C_INVOICE_ID=v_Record_ID);
        IF (v_count>0) THEN
          RAISE_APPLICATION_ERROR(-20000, '@PostedMatchPO@');
        END IF;
        DELETE FROM M_MATCHPO
        WHERE C_InvoiceLine_ID IN (SELECT C_InvoiceLine_ID FROM C_INVOICELINE WHERE C_Invoice_ID=v_Record_ID);
      END IF;
      UPDATE C_INVOICE
      SET Processed='N',
          DocStatus='DR',
          DocAction='CO',Updated=now(),
          UpdatedBy=v_UpdatedBy
      WHERE C_Invoice_Id=v_Record_ID;
      --Delete automatically created records ...
      DELETE FROM C_CASHLINE
      WHERE ISGENERATED='Y'
        AND C_DEBT_PAYMENT_ID IN
          (SELECT C_DEBT_PAYMENT_ID
           FROM C_DEBT_PAYMENT
           WHERE C_INVOICE_ID=v_Record_ID)
             AND C_CASH_ID IN (SELECT C_CASH_ID FROM C_CASH WHERE PROCESSED='N');
      -- Updates the debt-payments of the cash, to make them not to point to the invoice
      UPDATE C_DEBT_PAYMENT
      SET C_INVOICE_ID=NULL
      WHERE C_Invoice_ID=v_Record_ID
        AND C_Order_ID IS NOT NULL;
      DELETE FROM C_DEBT_PAYMENT
      WHERE C_Invoice_ID=v_Record_ID
        AND COALESCE(IsAutomaticGenerated, 'Y')='Y'
        AND C_ORDER_ID IS NULL;
      UPDATE C_DEBT_PAYMENT
      SET IsValid='N',Updated=now(),
          UpdatedBy=v_UpdatedBy
      WHERE C_Invoice_ID=v_Record_ID
        AND COALESCE(IsAutomaticGenerated, 'Y')='N'
        AND C_ORDER_ID IS NULL;
      IF (v_IsSOTrx='Y') THEN
        C_BP_SOCREDITUSED_REFRESH(v_BPartner_ID) ;
      END IF;
      DELETE FROM C_INVOICELINE
      WHERE C_INVOICE_DISCOUNT_ID IS NOT NULL
        AND C_INVOICE_ID=v_Record_ID;
      END_PROCESSING:=TRUE;
    END IF;
  END IF;--END_PROCESSING
  -- Issue 20553. Problem with the order of the execution of the triggers.
  -- By updating the Invoice Line again, we can assure that the Invoice Line Tax
  -- Trigger had been executed before.
  UPDATE C_INVOICELINE
  SET UPDATED = now()
  WHERE C_INVOICE_ID = v_Record_ID;
  IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
    /**************************************************************************
     * Actions allowed: COmplete, APprove
     */
    IF (v_DocAction='AP' OR v_DocAction='CO') THEN
   
      WHILE(v_DocType_ID<>v_DocTypeTarget_ID)
      LOOP
        BEGIN
          v_ResultStr:='UpdateDocType';
          UPDATE C_INVOICE
          SET C_DocType_ID=C_DocTypeTarget_ID,
              Updated=now(),
              UpdatedBy=v_UpdatedBy
          WHERE C_Invoice_ID=v_Record_ID;
          v_DocType_ID:=v_DocTypeTarget_ID;
        EXCEPTION
          WHEN OTHERS THEN
            v_ResultStr:='UpdateDocumentNo';
            UPDATE C_INVOICE
              SET DocumentNo=DocumentNo || '.'
            WHERE C_Invoice_ID=v_Record_ID;
        END;
      END LOOP;
    ELSE
      v_Message:='@ActionNotAllowedHere@ (I-' || v_DocAction || ')';
      RAISE_APPLICATION_ERROR(-20000, v_Message) ;
      END_PROCESSING:=TRUE;
    END IF;
  END IF;--FINISH_PROCESS


  IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
    /**************************************************************************
     * Update BP Statistics
     *************************************************************************/
    v_ResultStr:='Updating BPartners';
    -- First Sale
    UPDATE C_BPARTNER
    SET FirstSale=v_DateAcct
    WHERE C_BPartner_ID=v_BPartner_ID
      AND FirstSale IS NULL;
    -- Last Contact, Result
    UPDATE AD_USER
    SET LastContact=now(),
        LastResult=v_DocumentNo
    WHERE AD_User_ID=v_BPartner_User_ID;
    -- Update total revenue and credit limit
    -- It is reversed in C_Allocation_Trg
    --The next lines (5) have been commented due to the issue 19198
    --IF (v_IsSOTrx='Y') THEN
      --UPDATE C_BPARTNER
      --SET ActualLifeTimeValue=ActualLifeTimeValue +(v_Multiplier *  C_Base_Convert(v_GrandTotal, v_Currency_ID, v_Client_ID, v_DateAcct, v_Org_ID))
      --WHERE C_BPartner_ID=v_BPartner_ID;
    --END IF;
  END IF;--FINISH_PROCESS

  IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
    /**************************************************************************
     * Matching
     *************************************************************************/
    v_ResultStr:='Matching';
    IF (v_IsSOTrx='N') THEN
      DECLARE
        -- Invoice-Receipt Match
        Cur_ILines_Receipt RECORD;
        -- Invoice-PO Match
        Cur_ILines_PO RECORD;
        v_Qty NUMBER;
        v_MatchInv_ID VARCHAR2(32) ;
        v_MatchPO_ID VARCHAR2(32) ;
      BEGIN
        v_ResultStr:='MatchInv-Receipt';
        FOR Cur_ILines_Receipt IN
          (SELECT il.AD_Client_ID, il.AD_Org_ID, il.C_InvoiceLine_ID, ml.M_InOutLine_ID,
               ml.M_Product_ID, ml.MovementQty, il.QtyInvoiced, i.DateAcct
           FROM C_INVOICELINE il
                INNER JOIN M_INOUTLINE ml ON (il.M_InOutLine_ID=ml.M_InOutLine_ID)
                INNER JOIN M_INOUT m ON (ml.M_InOut_ID=m.M_InOut_ID)
                INNER JOIN C_INVOICE i ON(il.C_Invoice_ID=i.C_Invoice_ID)
           WHERE il.M_Product_ID=ml.M_Product_ID
             AND M.Processed = 'Y'
             AND il.C_Invoice_ID=v_Record_ID
           )
        LOOP
          IF (Cur_ILines_Receipt.M_INOUTLINE_ID IS NOT NULL) THEN
            SELECT COUNT(1) INTO v_Count
            FROM M_MATCHINV
            WHERE C_INVOICELINE_ID=Cur_ILines_Receipt.C_InvoiceLine_ID
              AND M_INOUTLINE_ID=Cur_ILines_Receipt.M_INOUTLINE_ID;
            IF (v_Count=0) THEN
              v_Qty:=Cur_ILines_Receipt.QtyInvoiced;
              v_MatchInv_ID := get_uuid();
              v_ResultStr:='InsertMatchInv ' || v_MatchInv_ID;
              DBMS_OUTPUT.PUT_LINE('  M_MatchInv_ID=' || v_MatchInv_ID || ' - ' || v_Qty) ;
              INSERT INTO M_MATCHINV
                (
                 M_MatchInv_ID, AD_Client_ID, AD_Org_ID, IsActive,
                 Created, CreatedBy, Updated, UpdatedBy,
                 M_InOutLine_ID, C_InvoiceLine_ID, M_Product_ID, DateTrx,
                 Qty, Processing, Processed, Posted
                )
                VALUES
                (
                 v_MatchInv_ID, Cur_ILines_Receipt.AD_Client_ID, Cur_ILines_Receipt.AD_Org_ID, 'Y',
                 now(), v_UpdatedBy, now(), v_UpdatedBy,
                 Cur_ILines_Receipt.M_InOutLine_ID, Cur_ILines_Receipt.C_InvoiceLine_ID, Cur_ILines_Receipt.M_Product_ID, Cur_ILines_Receipt.DateAcct,
                 v_Qty, 'N', 'Y', 'N'
                );
            END IF;
          END IF;
        END LOOP;

        UPDATE m_transaction
        SET checkpricedifference = 'Y'
        WHERE m_transaction_id in (
        SELECT TRX.M_TRANSACTION_ID 
        FROM C_INVOICELINE IL 
          JOIN M_MATCHINV MI ON IL.C_INVOICELINE_ID = MI.C_INVOICELINE_ID
          JOIN M_TRANSACTION TRX ON MI.M_INOUTLINE_ID = TRX.M_INOUTLINE_ID
        WHERE IL.C_INVOICE_ID = v_record_id);

        v_ResultStr:='MatchInv-PO';
        FOR Cur_ILines_PO IN
          (SELECT il.AD_Client_ID, il.AD_Org_ID, il.C_InvoiceLine_ID, ol.C_OrderLine_ID,
               ol.M_Product_ID, ol.C_Charge_ID, ol.QtyOrdered, il.QtyInvoiced,
                i.DateAcct
           FROM C_INVOICELINE il
                INNER JOIN C_ORDERLINE ol ON (il.C_OrderLine_ID=ol.C_OrderLine_ID)
                INNER JOIN C_INVOICE i ON (il.C_Invoice_ID=i.C_Invoice_ID)
           WHERE (il.M_Product_ID=ol.M_Product_ID
                  OR il.C_Charge_ID=ol.C_Charge_ID)
             AND il.C_Invoice_ID=v_Record_ID
          )
        LOOP
          -- The min qty. Modified by Ismael Ciordia
          --v_Qty := Cur_ILines_PO.QtyOrdered;
          --IF (ABS(Cur_ILines_PO.QtyOrdered) > ABS(Cur_ILines_PO.QtyInvoiced)) THEN
          v_Qty:=Cur_ILines_PO.QtyInvoiced;
          --END IF;
          v_MatchPO_ID := get_uuid();
          v_ResultStr:='InsertMatchPO ' || v_MatchPO_ID;
          DBMS_OUTPUT.PUT_LINE('  M_MatchPO_ID=' || v_MatchPO_ID || ' - ' || v_Qty) ;
          INSERT INTO M_MATCHPO
            (
             M_MatchPO_ID, AD_Client_ID, AD_Org_ID, IsActive,
             Created, CreatedBy, Updated, UpdatedBy,
             C_OrderLine_ID, M_InOutLine_ID, C_InvoiceLine_ID, M_Product_ID,
             DateTrx, Qty, Processing, Processed,
             Posted
            )
            VALUES
            (
             v_MatchPO_ID, Cur_ILines_PO.AD_Client_ID, Cur_ILines_PO.AD_Org_ID, 'Y',
             now(), v_UpdatedBy, now(), v_UpdatedBy,
             Cur_ILines_PO.C_OrderLine_ID, NULL, Cur_ILines_PO.C_InvoiceLine_ID, Cur_ILines_PO.M_Product_ID,
             Cur_ILines_PO.DateAcct, v_Qty, 'N', 'Y',
             'N'
            );
        END LOOP;
      END;
    ELSE -- Actualiza las cantidades facturadas de los pedidos de venta, y las lineas de albaryn facturadas
      DECLARE
        CurLines RECORD;
        p_DateInvoiced DATE;
        v_totalQtyInvoiced NUMBER;
        v_ODocumentNo C_ORDER.DocumentNo%TYPE;
        v_NewPendingToInvoice NUMBER;
        v_deliveredQty NUMBER;
        v_inOutStatus varchar2(60) ;
      BEGIN
        SELECT DateInvoiced
        INTO p_DateInvoiced
        FROM C_INVOICE
        WHERE C_Invoice_ID=v_Record_ID;
        FOR CurLines IN
          (SELECT * FROM C_INVOICELINE  WHERE C_INVOICE_ID=v_Record_ID  ORDER BY line)
        LOOP
          IF (CurLines.C_OrderLine_ID IS NOT NULL) THEN
            --Check that qty pending to invoice is higher or equal to the qty being invoiced
            SELECT o.documentno, ABS(ol.qtyordered) - ABS(ol.qtyinvoiced + CurLines.QtyInvoiced), p.isquantityvariable
              INTO v_ODocumentNo, v_NewPendingToInvoice, v_Isquantityvariable
            FROM c_order o, c_orderline ol
            LEFT JOIN m_product p ON p.m_product_id = ol.m_product_id
            WHERE o.c_order_id = ol.c_order_id
              AND ol.c_orderline_id = CurLines.c_orderline_id;
            IF (v_Isquantityvariable <> 'Y' AND v_NewPendingToInvoice <0) THEN
              v_Message := '@NotPossibleCompleteInvoice@' || ' ' || v_DocumentNo;
              v_Message := v_Message || ' ' || '@line@' || ' ' || CurLines.line || '. ';
              v_Message := v_Message || '@OrderDocumentno@' || ' ' || v_ODocumentNo;
              v_Message := v_Message || ': ' || '@QtyInvoicedHigherOrdered@' || '.';
              RAISE_APPLICATION_ERROR(-20000, v_Message);
            END IF;
            UPDATE C_ORDERLINE
            SET QtyInvoiced=QtyInvoiced + CurLines.QtyInvoiced,
                DateInvoiced=p_DateInvoiced,
                Updated=now(),
                UpdatedBy=v_UpdatedBy
            WHERE C_OrderLine_ID=CurLines.C_OrderLine_ID;
          END IF;
          IF (CurLines.M_InOutLine_ID IS NOT NULL) THEN
            SELECT m.DOCSTATUS INTO v_inOutStatus
            FROM M_INOUT m, M_INOUTLINE ml
            WHERE M.M_InOut_ID=ml.M_InOut_ID
              AND ml.M_InOutLine_ID=CurLines.M_InOutLine_ID;
            IF (v_inOutStatus<>'RE') THEN
              SELECT COALESCE(SUM(C_INVOICELINE.QTYINVOICED), 0) INTO v_totalQtyInvoiced
              FROM C_INVOICELINE, C_INVOICE
              WHERE C_INVOICE.C_Invoice_ID=C_INVOICELINE.C_Invoice_ID
                AND C_INVOICE.Processed='Y'
                AND C_INVOICELINE.M_InOutLine_ID=CurLines.M_InOutLine_ID;
              v_totalQtyInvoiced:=v_totalQtyInvoiced + CurLines.QtyInvoiced;
              SELECT MovementQty INTO v_deliveredQty
              FROM M_INOUTLINE
              WHERE M_InOutLine_ID=CurLines.M_InOutLine_ID;
              UPDATE M_INOUTLINE
              SET IsInvoiced=(
                    CASE v_totalQtyInvoiced
                      WHEN 0 THEN 'N'
                      ELSE 'Y'
                    END)
              WHERE M_InOutLine_ID=CurLines.M_InOutLine_ID;
            END IF;
          END IF;
        END LOOP;
      END;
    END IF;
  END IF;--FINISH_PROCESS

  IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
    -- Finish up -------------------------------------------------------------
    UPDATE C_INVOICE
    SET DocStatus='CO',
        Processed='Y',
        DocAction='RE',
        Updated=now(),
        UpdatedBy=v_UpdatedBy
    WHERE C_Invoice_ID=v_Record_ID;
  END IF;--FINISH_PROCESS
  IF (NOT FINISH_PROCESS) THEN
    -- End Processing --------------------------------------------------------
    --<<END_PROCESSING>>
    v_ResultStr:='UnLockingInvoice';
    UPDATE C_INVOICE
    SET Processing='N',
        Updated=now(),
        UpdatedBy=v_UpdatedBy
    WHERE C_Invoice_ID=v_Record_ID;
    -- Commented by cromero 19102006 IF (p_PInstance_ID IS NOT NULL) THEN
    -- Commented by cromero 19102006   COMMIT;
    -- Commented by cromero 19102006 END IF;
  END IF;--FINISH_PROCESS

  --C_Invoice_Post - Finish_Process Extension Point
  SELECT count(*) INTO v_count FROM DUAL
  WHERE EXISTS (SELECT 1 FROM ad_ep_procedures WHERE ad_extension_points_id = 'CBE7DD2E561E4D3D8257ECEA5F19687F');
  IF (v_count=1) THEN
    DECLARE
      v_ep_instance VARCHAR2(32);
      v_extension_point_id VARCHAR2(32) := 'CBE7DD2E561E4D3D8257ECEA5F19687F';
    BEGIN
      v_ep_instance := get_uuid();
      AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Record_ID', v_record_id, NULL, NULL, NULL, NULL, NULL, NULL);
      AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'DocAction', v_DocAction, NULL, NULL, NULL, NULL, NULL, NULL);
      AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'User', v_UpdatedBy, NULL, NULL, NULL, NULL, NULL, NULL);
      AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Message', NULL, NULL, NULL, NULL, NULL, NULL, v_Message);
      AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Result', NULL, NULL, v_result, NULL, NULL, NULL, NULL);
      AD_EXTENSION_POINT_HANDLER(v_ep_instance, v_extension_point_id);
      SELECT p_number INTO v_Result
      FROM ad_ep_instance_para
      WHERE ad_ep_instance_id = v_ep_instance
        AND parametername LIKE 'Result';
      SELECT p_text INTO v_Message
      FROM ad_ep_instance_para
      WHERE ad_ep_instance_id = v_ep_instance
        AND parametername LIKE 'Message';

      DELETE FROM ad_ep_instance_para
      WHERE ad_ep_instance_id = v_ep_instance;
    END;
  END IF;

  FOR Cur_lineqty IN
      (SELECT C_INVOICELINE.qtyInvoiced
       FROM C_INVOICELINE
       WHERE C_Invoice_ID = v_Record_ID
      )
    LOOP
    IF(Cur_lineqty.qtyInvoiced <> 0) THEN
      v_totalqty := v_totalqty + 1;
     END IF;
    END LOOP;
  --<<FINISH_PROCESS>>
  IF (p_PInstance_ID IS NOT NULL) THEN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
   
    IF(v_totalqty = 0 AND v_DocAction <> 'RE') THEN
      SELECT COUNT(1)
      INTO v_hasTaxes
      FROM DUAL
      WHERE EXISTS (SELECT 1
                    FROM C_INVOICETAX
                    WHERE C_Invoice_ID = v_Record_ID);
      IF(v_hasTaxes=0) THEN
        v_Message := v_Message || '@NoAccountingEntryInvoice@';
      END IF;
    END IF;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, v_UpdatedBy, 'N', v_Result, v_Message) ;
  ELSE
    DBMS_OUTPUT.PUT_LINE('--<<C_Invoive_Post finished>> ' || v_Message) ;
  END IF;
  RETURN;
END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
     v_ResultStr:= '@ERROR=' || SQLERRM;
      DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
      IF (p_PInstance_ID IS NOT NULL) THEN
        ROLLBACK;
        AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
      ELSE
        RAISE;
      END IF;
  -- Commented by cromero 19102006 RETURN;
END EFIN_INVOICE_POST
]]></body>
    </function>
  </database>
